import { createClient } from '@supabase/supabase-js'

// Server-only Supabase client using the service_role key.
function getSupabaseServiceClient() {
  const url = process.env.SUPABASE_URL
  const key = process.env.SUPABASE_SERVICE_ROLE_KEY
  if (!url || !key) throw new Error('Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY')
  return createClient(url, key)
}

// Table schema expected:
// CREATE TABLE logs (
//   id bigint generated by default as identity primary key,
//   level text,
//   message text,
//   meta jsonb,
//   ts timestamptz default now()
// );

export default async function handler(req, res) {
  const supa = getSupabaseServiceClient()

  if (req.method === 'POST') {
    try {
      const { level = 'info', message = '', meta = null } = req.body || {}
      // insert a row
      const { error } = await supa.from('logs').insert({ level, message, meta })
      if (error) throw error
      return res.status(201).json({ ok: true })
    } catch (err) {
      console.error('Write log error', err)
      return res.status(500).json({ error: 'failed to write log' })
    }
  }

  if (req.method === 'GET') {
    // protect with server-side admin token header
    const token = req.headers['x-admin-token'] || ''
    if (!process.env.LOG_ADMIN_TOKEN || token !== process.env.LOG_ADMIN_TOKEN) {
      return res.status(403).json({ error: 'forbidden' })
    }
    try {
      // return last 1000 logs, newest first
      const { data, error } = await supa
        .from('logs')
        .select('id, level, message, meta, ts')
        .order('ts', { ascending: false })
        .limit(1000)
      if (error) throw error
      return res.status(200).json({ logs: data || [] })
    } catch (err) {
      console.error('Read log error', err)
      return res.status(500).json({ error: 'failed to read logs' })
    }
  }

  res.setHeader('Allow', 'GET, POST')
  res.status(405).end('Method Not Allowed')
}
